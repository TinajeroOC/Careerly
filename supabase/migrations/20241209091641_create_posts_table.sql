-- Add posts table
CREATE TABLE IF NOT EXISTS "public"."posts" (
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    "content" text NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "updated_at" timestamp with time zone,
    CONSTRAINT "posts_content_length" CHECK (length(content) <= 3000)
);

ALTER TABLE "public"."posts" OWNER TO "postgres";

INSERT INTO storage.buckets (id, name, public) 
VALUES ('post-media', 'post-media', true);

-- Add post_media table
CREATE TABLE IF NOT EXISTS "public"."post_media" (
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "post_id" integer NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    "media_url" text NOT NULL,
    "media_type" text NOT NULL,
    "order_index" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT "post_media_type_check" CHECK (media_type IN ('image', 'video')),
    CONSTRAINT "post_media_url_check" CHECK (media_url ~ '^http?:\/\/(www\.)?([a-zA-Z0-9.-]+|\d{1,3}(\.\d{1,3}){3})(:[0-9]+)?\/[-a-zA-Z0-9@:%_\+.~#?&//=]*$'),
    CONSTRAINT "post_media_order_index_check" CHECK (order_index >= 0)
);

ALTER TABLE "public"."post_media" OWNER TO "postgres";

-- Enable RLS on posts table
ALTER TABLE "public"."posts" ENABLE ROW LEVEL SECURITY;

-- Enable RLS on post_media table
ALTER TABLE "public"."post_media" ENABLE ROW LEVEL SECURITY;

-- Posts policies
CREATE POLICY "Enable read access for all users" 
ON "public"."posts" FOR SELECT 
USING (true);

CREATE POLICY "Enable insert for authenticated users" 
ON "public"."posts" FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable update for users based on user_id" 
ON "public"."posts" FOR UPDATE 
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable delete for users based on user_id" 
ON "public"."posts" FOR DELETE 
USING (auth.uid() = user_id);

-- Post media policies
CREATE POLICY "Enable read access for all users" 
ON "public"."post_media" FOR SELECT 
USING (true);

CREATE POLICY "Enable insert for post owners" 
ON "public"."post_media" FOR INSERT 
WITH CHECK (
    auth.uid() = (
        SELECT user_id 
        FROM public.posts 
        WHERE id = post_id
    )
);

CREATE POLICY "Enable update for post owners" 
ON "public"."post_media" FOR UPDATE 
USING (
    auth.uid() = (
        SELECT user_id 
        FROM public.posts 
        WHERE id = post_id
    )
)
WITH CHECK (
    auth.uid() = (
        SELECT user_id 
        FROM public.posts 
        WHERE id = post_id
    )
);

CREATE POLICY "Enable delete for post owners" 
ON "public"."post_media" FOR DELETE 
USING (
    auth.uid() = (
        SELECT user_id 
        FROM public.posts 
        WHERE id = post_id
    )
);

-- Create policy to allow authenticated users to upload files
CREATE POLICY "Allow authenticated uploads"
ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK (
    bucket_id = 'post-media'
    AND owner = auth.uid()
);

-- Create policy to allow public access to files
CREATE POLICY "Allow public read access"
ON storage.objects
FOR SELECT
TO public
USING (bucket_id = 'post-media');

-- Grant permissions
GRANT ALL ON TABLE "public"."posts" TO "anon";
GRANT ALL ON TABLE "public"."posts" TO "authenticated";
GRANT ALL ON TABLE "public"."posts" TO "service_role";

GRANT ALL ON TABLE "public"."post_media" TO "anon";
GRANT ALL ON TABLE "public"."post_media" TO "authenticated";
GRANT ALL ON TABLE "public"."post_media" TO "service_role";
